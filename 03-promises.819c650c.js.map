{"mappings":"iiBAMA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,OAAQL,SAASC,cAAc,oBAG7BK,EAAQ,EACRC,EAAO,EACPC,EAAS,EACTC,EAAW,EAEfX,EAAKC,KAAKW,iBAAiB,UAW3B,SAAsBC,GACpBA,EAAEC,iBACFN,EAAQO,OAAOf,EAAKI,MAAMY,OAC1BC,QAAQC,IAAI,UAAWV,GAEvBC,EAAOM,OAAOf,EAAKK,KAAKW,OAGxBN,EAASK,OAAOf,EAAKM,OAAOU,OAG5B,IAAK,IAAIG,EAAI,EAAGA,EAAIT,EAAQS,GAAK,EAC/BC,EAAcT,EAAUH,GACxBA,GAASC,EACTE,GAAY,EAEZM,QAAQC,IAAI,UAAkBP,GAEvBM,QAACC,IAAI,QAAcV,MA1B9BS,QAAQI,IAAIrB,EAAKI,OAED,IAAIkB,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACTF,EAAQ,aACPf,MAyBL,SAASY,EAAcM,EAAUtB,GACTuB,KAAKC,SAQ7BR,IACGS,MAAK,SAAAC,G,IAAGC,EAAQD,EAARJ,SAAUM,EAAKF,EAAL1B,MACjB6B,EAAAnC,GAASoC,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,UAEvEK,OAAM,SAAAP,G,IAAGQ,EAAQR,EAARJ,SAAUa,EAAKT,EAAL1B,MAClB6B,EAAAnC,GAASoC,OAAOM,QAAQ,sBAAqCJ,OAAfE,EAAS,QAAYF,OAANG,EAAM,U","sources":["src/js/03-promises.js"],"sourcesContent":["// *В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// *Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount.При каждом вызове передай ей номер создаваемого промиса(position) и задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\n\n// *Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени.Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров.Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  submit: document.querySelector('[type=\"submit\"]'),\n};\n\nlet delay = 0;\nlet step = 0;\nlet amount = 0;\nlet position = 0;\n\nrefs.form.addEventListener('submit', onFormSubmit);\n// refs.submit.addEventListener('click', onFormSubmit);\n\nconsole.dir(refs.delay);\n\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success');\n  }, delay);\n});\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  delay = Number(refs.delay.value);\n  console.log('~ delay', delay);\n\n  step = Number(refs.step.value);\n  // console.log('~ step', step);\n\n  amount = Number(refs.amount.value);\n  // console.log('~ amount', amount);\n\n  for (let i = 0; i < amount; i += 1) {\n    createPromise(position, delay);\n    delay += step;\n    position += 1;\n\n    console.log('ПОЗИЦИЯ', position);\n\n    console.log('ВРЕМЯ', delay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n//  Notiflix.Notify.warning('Please choose a date in the future');\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","submit","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$position","addEventListener","e","preventDefault","Number","value","console","log","i","$ce04d3a99e08e73b$var$createPromise","dir","Promise","resolve","reject","setTimeout","position","Math","random","then","param","position1","delay1","$parcel$interopDefault","Notify","success","concat","catch","position2","delay2","failure"],"version":3,"file":"03-promises.819c650c.js.map"}