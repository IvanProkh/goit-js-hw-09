{"mappings":"qhBAMA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,oBAIjC,IAAII,EAAQ,EACRC,EAAO,EACPC,EAAS,EACTC,EAAW,EAEfV,EAAKC,KAAKU,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAEFN,EAAQO,OAAOd,EAAKI,MAAMW,OAE1BP,EAAOM,OAAOd,EAAKK,KAAKU,OACxBN,EAASK,OAAOd,EAAKM,OAAOS,OAE5BC,QAAQC,IAAI,kBAAiCV,GAE7C,IAAK,IAAIW,EAAI,EAAGA,EAAIT,EAAQS,GAAK,EAC/BX,GAASC,EACTE,GAAY,EAEZS,EAAcT,EAAUH,GACrBa,MAAK,EAAGC,SAAAC,EAAUlB,MAAAmB,MACjBC,EAAA1B,GAAS2B,OAAOC,QACd,uBAAqBJ,QAAiBC,OAExCP,QAAQC,IAAI,uBAAqBK,QAAiBC,UAEnDI,OAAM,EAAGN,SAAAO,EAAUxB,MAAAyB,MAClBL,EAAA1B,GAAS2B,OAAOK,QACd,sBAAoBF,QAAiBC,OAEvCb,QAAQC,IAAI,sBAAoBW,QAAiBC,UAUrDjB,EAAEmB,OAAOC,WAKb,MAAMb,EAAgB,CAACc,EAAUC,IAIf,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,CAAEf,SAAAY,EAAU7B,MAAA8B,IAEpBG,EAAO,CAAEhB,SAAAY,EAAU7B,MAAA8B,IAGrBlB,QAAQC,IAAI,UAAkBgB,GACvBjB,QAACC,IAAI,QAAciB,KACzBA","sources":["src/js/03-promises.js"],"sourcesContent":["// *В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// *Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount.При каждом вызове передай ей номер создаваемого промиса(position) и задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\n\n// *Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени.Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров.Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  // submit: document.querySelector('[type=\"submit\"]'),\n};\n\nlet delay = 0;\nlet step = 0;\nlet amount = 0;\nlet position = 0;\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  // firtstDelay = Number(refs.delay.value);\n  delay = Number(refs.delay.value);\n\n  step = Number(refs.step.value);\n  amount = Number(refs.amount.value);\n\n  console.log('НАЧАЛЬНОЕ ВРЕМЯ', delay);\n  // const interval = setInterval(() => {\n  for (let i = 0; i < amount; i += 1) {\n    delay += step;\n    position += 1;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    // .finally(() => {\n    // if (position === amount || position > amount) {\n    //   clearInterval(interval);\n    // }\n    // });\n\n    // delay += step;\n\n    e.target.reset();\n    // }, 0);\n  }\n}\n\nconst createPromise = (position, delay) => {\n  // delay += step;\n  // step = Number(refs.step.value);\n\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    // delay += step;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n\n      console.log('ПОЗИЦИЯ', position);\n      console.log('ВРЕМЯ', delay);\n    }, delay);\n  });\n\n  return promise;\n};\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     resolve Promise(position, delay);\n//   } else {\n//     reject Promise(position, delay);\n//   }\n// }\n\n//  Notiflix.Notify.warning('Please choose a date in the future');\n\n// import Notiflix from 'notiflix';\n\n// const refs = {\n//   form: document.querySelector('.form'),\n//   delay: document.querySelector('[name=\"delay\"]'),\n//   step: document.querySelector('[name=\"step\"]'),\n//   amount: document.querySelector('[name=\"amount\"]'),\n//   submit: document.querySelector('[type=\"submit\"]'),\n// };\n\n// let delay = 0;\n// let step = 0;\n// let amount = 0;\n// let position = 1;\n\n// refs.form.addEventListener('submit', onFormSubmit);\n// // refs.submit.addEventListener('click', onFormSubmit);\n\n// // const promise = new Promise((resolve, reject) => {\n// //   setTimeout(() => {\n// //     resolve('success');\n// //   }, delay);\n// // });\n\n// function onFormSubmit(e) {\n//   e.preventDefault();\n//   delay = Number(refs.delay.value);\n//   // console.log('НАЧАЛЬНОЕ ВРЕМЯ', delay);\n//   step = Number(refs.step.value);\n//   amount = Number(refs.amount.value);\n\n//   for (let i = 0; i < amount; i += 1) {\n//     createPromise(i, delay)\n//       .then(({ position, delay }) => {\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//   }\n\n//   // const time = setTimeout(() => {\n//   //   createPromise(position, delay)\n//   //     .then(({ position, delay }) => {\n//   //       Notiflix.Notify.success(\n//   //         `✅ Fulfilled promise ${position} in ${delay}ms`\n//   //       );\n//   //       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   //     })\n//   //     .catch(({ position, delay }) => {\n//   //       Notiflix.Notify.failure(\n//   //         `❌ Rejected promise ${position} in ${delay}ms`\n//   //       );\n//   //       console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   //     });\n\n//   //   delay += step;\n//   //   position += 1;\n//   //   console.log('ВРЕМЯ', delay);\n//   // }, delay);\n// }\n// // delay += step;\n\n// // position += 1;\n\n// // console.log('ПОЗИЦИЯ', position);\n// console.log('ВРЕМЯ', delay);\n// // }\n// // }\n\n// // function createPromise(position, delay) {\n// //   const shouldResolve = Math.random() > 0.3;\n// //   if (shouldResolve) {\n// //     resolve Promise(position, delay);\n// //   } else {\n// //     reject Promise(position, delay);\n// //   }\n// // }\n\n// const createPromise = (position, delay) => {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// };\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$position","addEventListener","e","preventDefault","Number","value","console","log","i","$47d4ff9957288465$var$createPromise","then","position","position1","delay1","$parcel$interopDefault","Notify","success","catch","position2","delay2","failure","target","reset","position3","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.5900b8dd.js.map"}